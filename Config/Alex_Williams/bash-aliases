# -*-Sh-*- <-- tells emacs what kind of syntax highlighting to use

if [ -f ~/TimeForScience/Config/Alex_Williams/bash-platform-specific ]; then
    source ~/TimeForScience/Config/Alex_Williams/bash-platform-specific
fi

echo -e "${a_echo_color}>>> BASH: Loading bash-aliases...${a_end_color}"

alias SET_NAUCOLOR="echo -n ''"
alias SET_LOCALCOLOR="echo -n ''"
alias SET_LIGHTHOUSECOLOR="echo -n ''"
alias SET_BUENOCOLOR="echo -n ''"

## Searches both the R source and the current directory (and any subdirectories!)
## Note that it only looks for files with a ".R" ending!!!!!!!
if [[ -n "$isMac" ]] ; then
    function ff {
	`which grep` --color=always --ignore-case --recursive --extended-regexp --exclude="Mothballed" --exclude=".hg" --exclude="CVS" --exclude="[bB]ackup*" --exclude="Annotation*.txt" \
	    "$*" \
	    "${BINF_CORE_WORK_DIR}/Common/Code/R_Binf_Core" \
	    "${BINF_CORE_WORK_DIR}/Common/Code/ProjectCode" \
	    "/home/alexgw/TimeForScience" \
	    ./
    }
else
    function ff {     ## Annoyingly, grep is different between mac/unix
	grep --color=always -T \
	    --ignore-case \
	    --recursive \
	    --extended-regexp \
	    --line-number --with-filename \
	    --exclude-dir="Mothballed" --exclude-dir="\.hg" --exclude-dir="CVS" --exclude-dir="[bB]ackup*" \
	    --binary-files=without-match \
	    --include=*.R --include=*.pl --include=*.py \
	    "$*" \
	    "${BINF_CORE_WORK_DIR}/Common/Code/R_Binf_Core" \
	    "${BINF_CORE_WORK_DIR}/Common/Code/ProjectCode" \
	    "/home/alexgw/TimeForScience"
    }
fi

function delve {
    ## Finds, in any subdirectories, any files that have a name that matches the input text.
    ## Sort of like a poor man's "locate"
    find ./ -iname "*$**"
}

BRACKET_OPEN='{'
PAREN_OPEN='('
alias cheat="echo \">>> Find all .R files in a directory:   find ./ -name \"*.R\" -exec ls \'{}\' \;\" ; \
echo \">>> DIFF directories:   diff -rq DIR1 DIR2\" ; \
echo \" \" ; \
echo \">>> R: Install new package from source:  R CMD INSTALL packagename.tar.gz  (or use biocLite(...) or install.packages(...))\" ; \
echo \">>> R: sessionInfo(): show package versions. ls('package:something') shows package details.\" ; \
echo \">>> R: t.test failing? Use tryCatch: tryCatch(something, error=function() { return('NA'); }); \" ; \
echo \">>> R: Need to un-list things? Use unlist! \" ; \
echo \">>> R: Perpendicular axis labels: las=2 (1=horiz, 3=vertical) \" ; \
echo \">>> R: Draw beyond graph region: par(xpd=T/F/NA) \" ; \
echo \">>> R: Figure out attributes of a variable: attr(x, 'theAttribute'); Works even when names()/attributes() does not! \" ; \
echo \" \" ; \
echo \">>> NIX: Check Linux version: cat /etc/*-release\" ; \
echo \">>> NIX: Set system time on Ubuntu: sudo ntpdate-debian\" ; \
echo \">>> NIX: Set system time on Ubuntu: sudo ntpdate-debian\" ; \
echo \">>> NIX: Password FTP command line Xfer: wget -r ftp://USERNAME:password@ftp.some.site.com/Somefiles\" ; \
echo \">>> PKG/NIX: See why Ubuntu wants to restart:  cat /var/run/reboot-required.pkgs\" ; \
echo \">>> APT PKG: dpkg / apt-get woes? Try manually editing /var/lib/dpkg/info/YOURPACKAGE . Be careful! \" ; \
echo \">>> APT PKG: Check the version of an apt-get installed package:   dpkg -s <packagename>  OR   dpkg -l | grep -i <search_string>\" ; \
echo \">>> APT PKG: Fix 'NO_PUBKEY *SOMEKEY*' in APT: gpg --keyserver subkeys.pgp.net --recv *SOMEKEY* ; gpg --export --armor *SOMEKEY* | sudo apt-key add - \" ; \
echo \">>> SSH Passphraseless: Client: ssh-keygen -t rsa ; Append client ~/.ssh/id_rsa.pub \" ; \
echo \"                         to server ~/.ssh/authorized_keys  \" ; \
echo \">>> CHMOD Make files readable, directories r+x (print0/-0 makes filenames with spaces work):\" ; \
echo \"      sudo chmod -R a+r ./ ; sudo find ./ -type d -print0 | sudo xargs -0 chmod a+x \" ; \
echo \" \" ; \
echo \">>> BASH: Foreach / rename: for f in \\\$${PAREN_OPEN}ls); do echo \\\$f will become \\\$${BRACKET_OPEN}f/.txt/.newending} ; done  \" ; \
echo \">>> ZIP: Zip a folder: zip -r ARCHIVENAME FOLDER \" ; \
echo \">>> BASH: See a function definition:   type FUNCTIONNAME \" ; \
echo \">>> Gnu parallel: works like xargs, but works with files with spaces, by default. \" ; \
echo \">>> REGEXP Perl multi-line search/replace: perl -00pe 's{thing1}{thing2}gxms' THE_FILE \"  s lets '.' match newlines\; m makes ^ and \$ work ; \
echo \">>> REGEXP EMACS: insert newline in search-and-replace:  Ctrl-Q Ctrl-J\" ; \
echo \" \" ; \
echo \">>> RNASEQ SAM --> BAM:  samtools view -bS in.sam > out.bam;\" ; \
echo \">>> RNASEQ BAM --> SAM:  samtools view -h  in.bam > out.sam;\" ; \
echo \">>> RNASEQ View BAM header: samtools view -H  in.bam \" ; \
echo \">>> RNASEQ Count frequencies of first 5 bases of a SAM file: cut -f 10 theFile.sam | cut -c 1-5 | sort | uniq -c \" ; \
echo \">>> DNA Reverse-complement:  perl -e '\\\$x = qq{AAAA_SEQUENCE_GGGG_TT_CC}; \\\$_ = scalar(reverse(\\\$x)); tr/ACGT/TGCA/; print \\\$_;' \" ; \
echo \">>> APACHE error log: sudo less -S /var/log/apache2/error.log \" ; \
echo \">>> OS X Dictionary: /usr/share/dict/words \" ; \
echo \">>> OS X Image type convert: mkdir -p PNGS_TO_JPEG; sips -s format jpeg *.png --out PNGS_TO_JPEG \" ; \
echo \">>> COPROC: coproc: re-run a command every 19 seconds: for i in {1..50} ; do coproc { ls >> myfile.tmp ; } ; sleep 19; kill \\\$COPROC_PID ; sleep 2; done \" ; \
echo \">>> LINES RANDOM subset (0.5 = 50%, 0.1 = 10%, etc):  perl -ne 'if ( rand() < 0.5 ) { print(\\\$_); }' theFile.txt \" ; \
echo \">>> LINES: Range from N to M, inclusive (starts at 1):  sed -n N,Mp INPUTFILE  or  for a HUGE file: sed -n '(N+1)q;N,Mp' <-- quit on line (N+1) \" ; \
echo \">>> LINES: Every Xth, starting with line Y (starts at 1, not 0): awk 'NR%X==Y'\" FILE ; \
echo \">>> LINES based on perl expr: perl -e '$n = 0; while(<>) { if ($n%2 == 0) { print $_; }; $n++; }' \" ; \
echo \">>> LINES Count characters on each line: cat FILENAME | awk '{print length(\\\$0)}' \" ; \
"


# Shell navigation / commands

#pushd() { builtin pushd "$@" > /dev/null; } ## <-- make it so that pushd doesn't print the stack every single time

[[ -n "$color_prompt" && (-n "$isMac") ]] && AGW_LS_COLOR_OPT=' -G ' ## Mac: Color option is -G
[[ -n "$color_prompt" && (-z "$isMac") ]] && AGW_LS_COLOR_OPT=' --color=auto ' ## Ubuntu: color is --color=auto

alias l='/bin/ls -F ${AGW_LS_COLOR_OPT}'
alias ls='/bin/ls -F ${AGW_LS_COLOR_OPT}'
alias ll='/bin/ls -lh -A -F ${AGW_LS_COLOR_OPT}'
alias p='pwd -P'
alias tc='randomize_terminal_color.pl -cycle'
#alias cd='pushd'
alias b='popd'
alias ..='cd ..'
#alias ..='pushd ..'
alias res='source ~/.bashrc ; source ~/.bash_profile'
alias mv='mv -i'
alias cp='cp -i'
alias kpk='exit'
alias diffdir='diff -rq' ## diff on directories


## ===============================================================
## ====== SAFER 'rm' COMMANDS ====================
## Below: aliases the command "rm" to actually run the script "trash.pl," which moves files to a trash directory in /tmp.
## They can be recovered by just copying them back.
## Use the "checktrash" command to find the trash directory if you forget where it is.
#alias rm='/home/${USER}/trash.pl'
alias rm='trash.pl' ## <-- Note that the "real" rm can still always be invoked by '/bin/rm'
## Below: the command to list the top-level contents of the trash directory. You may have to look through the files here if you want to recover something you just accidentally deleted. Beware, files don't last long in /tmp\!
alias checktrash='mkdir -p /tmp/${USER}/Trash/ && echo "Contents of /tmp/${USER}/Trash:" && ls /tmp/${USER}/Trash/'
alias emptytrash='mkdir -p /tmp/${USER}/Trash/ && /bin/rm -rfv /tmp/${USER}/Trash/ && echo "Emptied the trash directory (/tmp/${USER}/Trash)" ;'
## ====== SAFER 'rm' COMMANDS ====================
## ===============================================================

## "showoff" makes it so that everyone can a+rx any directories and a+r any files.
## Note that we don't want to make it so everyone can execute *files* necessarily, just folders
## ("Executing" a folder means you can "ls" it and see what's inside.)
function showoff { chmod -R a+r $1 ; find $1 -type d -type d -exec chmod a+x \{\} \; ; }
function sudoshowoff { sudo chmod -R a+r $1 ; sudo find $1 -type d -exec sudo chmod a+x \{\} \; ; }

## Mac-specific commands:
alias invisible='SetFile -a V' ## Mac-only: Make a file/folder invisible to the Finder
alias visible='SetFile -a v' ## Mac-only: opposite of "invisible"
alias clearicon='SetFile -a c' ## clear mac custom icons. Useful for images that have old custom icons.

alias version="lsb_release -a" # Tells you which version of Ubuntu you are running!

alias res="source ~/.bashrc" ## Re-load the source file

function mac2unix { # Convert a Mac-style line-ending file to a UNIX one. Useful for when you save a file in Excel and then UNIX won't read it.
    if [[ -f "$1" ]] ; then cat $1 | tr '\r' '\n' ## if a filename is passed in, then auto-cat that file
    else tr '\r' '\n' ; fi ## otherwise it's probably part of a cmdline pipe
}

function dos2unix { # Convert a Windows-style line-ending file to a UNIX one. Useful for when you save a file in Excel and then UNIX won't read it.
    if [[ -f "$1" ]] ; then cat $1 | tr -d '\r' ## if a filename is passed in, then auto-cat that file
    else tr -d '\r'; fi ## otherwise it's probably part of a cmdline pipe
}

## Utility commands

## -U: "screen understands UTF8"
alias rr="screen -xR -U" ## Reconnect to the previous screen, or make a new one if there isn't one already
alias sc='screen' ## Make a new screen session

alias wcl='wc -l'
alias sortt='sort -t "	"' # sort with tab as separator
alias sortg='sort -g -t "	"' # sort NUMBERS, with tab as separator

if [[ -f /Applications/Emacs.app/Contents/MacOS/Emacs ]]; then
    echo -e "${a_echo_color}>>> BASH: Note: alising 'e' to the Mac Application version of emacs.${a_end_color}"
    alias e='/Applications/Emacs.app/Contents/MacOS/Emacs -nw'
elif [[ isMac -eq 1 ]]; then
    alias e='emacs --daemon ; emacsclient -a "emacs"'
else
    alias e='emacs --daemon ; emacsclient -c -a "emacs"'
    #alias e='emacs -nw'
fi

alias t='transpose.pl -q'
alias tattle="echo -e -n '$a_status_color'; ps aux | tail -n +2 | sort --reverse -k 3,3 | head -n 5 | perl -p -e 's/[ ]+/\t/g' | cut -f 1,3,4,11 | cap.pl 'USER,CPU,MEM,TASK' | sheet.pl --color=always \
--ht=75 --trunc=60 | tail -n +2 ; echo -e -n '$a_end_color'"

# GNU Make-related
alias make='make --warn-undefined-variables --print-directory'
alias mcm='make clean && make'
function remake {
    ## Lets you type "remake" to remove a file and then use GNU make to try to re-generate it
	trash.pl "$1" && make --warn-undefined-variables --print-directory "$1"
}

# Aliases related to COLOR GREP
alias grepc='grep   --color=always --with-filename --line-number'
alias egrepc='egrep --color=always --with-filename --line-number'
alias fgrepc='fgrep --color=always --with-filename --line-number'

# Aliases related to CVS
alias commit="cvs commit -m 'AGW CVS Commit'"
alias gitcom="git commit -a -m 'Changes committed by alexgw'"
alias gitstat="git ls-files --modified --deleted"
alias gitdiff="git difftool"

alias hgcom="hg commit -u '${USER}' -m 'Changes committed by ${USER}' && echo '[Done] committing changes locally with Mercurial.'"
alias hgpush="hg commit -u '${USER}' -m 'Changes committed by ${USER}' && hg push && echo '[Done] pushing changes to the remote server with Mercurial.'"
alias hgpull="hg pull && hg update && echo '[Done] pulling remote changes and updating the local Mercurial repository.'"
alias hgup="hg update && echo '[Done] updating local changes in Mercurial'"
alias hgs="hg status"

function hglog {
    hg status
    if [[ $? == "0" ]] ; then  ## <-- only check the log if there is actually a mercurial repo here!
	hg log -p --color=always $* | s
    fi
}

alias workstat='hg --cwd "${BINF_CORE_WORK_DIR}/Common/Code" status ; hg --cwd "${BINF_CORE_WORK_DIR}/Common/GICD_ProjectArchives status"'

function workcom {
    ## Note that "push" will always complain on Nausicaa or Catbus, because those are the MASTER repositiories
    hg commit --user ${USER} --cwd "${BINF_CORE_WORK_DIR}/Common/Code" -m "Commit by ${USER}" ;
    hg push --cwd "${BINF_CORE_WORK_DIR}/Common/Code" ;

    hg commit --user ${USER} --cwd "${BINF_CORE_WORK_DIR}/Common/GICD_ProjectArchives" -m "Commit by ${USER}" ;
    hg push --cwd "${BINF_CORE_WORK_DIR}/Common/GICD_ProjectArchives" ;

    hg commit --user ${USER} --cwd "${BINF_CORE_WORK_DIR}/Common/Data" -m "Commit by ${USER}" ;
    hg push --cwd "${BINF_CORE_WORK_DIR}/Common/Data" ;

    echo "[Done] committing work repository"  # && hg push --cwd ${BINF_CODE}'
}

function workup { ## Update mercurial work directories
    hg --cwd "${BINF_CORE_WORK_DIR}/Common/Code" pull && hg --cwd "${BINF_CORE_WORK_DIR}/Common/Code" update && echo "[Done] updating work code repository"
    hg --cwd "${BINF_CORE_WORK_DIR}/Common/Data" pull && hg --cwd "${BINF_CORE_WORK_DIR}/Common/Data" update && echo "[Done] updating work data repository"
    hg --cwd "${BINF_CORE_WORK_DIR}/Common/GICD_ProjectArchives" pull && hg --cwd "${BINF_CORE_WORK_DIR}/Common/GICD_ProjectArchives" update && echo "[Done] updating work project archive repository"
}

alias sciencecom='hg commit --user ${USER} --cwd "${TIME_FOR_SCIENCE_DIR}" -m "Commit by ${USER}" && hg push --cwd ${TIME_FOR_SCIENCE_DIR} && echo "[Done] commiting and pushing TimeForScience repository"'
alias scienceup='hg --cwd "${TIME_FOR_SCIENCE_DIR}" pull           && hg --cwd "${TIME_FOR_SCIENCE_DIR}" update           && echo "[Done] updating TimeForScience repository"'


alias science="scienceup ; sciencecom ; workup ; workcom"
alias sciencestat='hg --cwd ${TIME_FOR_SCIENCE_DIR} status'


alias nau='SET_NAUCOLOR ; ssh  $UCSF_USER@nausicaa.ucsf.edu ; agwReColorTerminal'
alias catbus='ssh $UCSF_USER@catbus.gladstone.internal ; agwReColorTerminal'
alias lighthouse='SET_LIGHTHOUSECOLOR ; ssh  $UCSF_USER@lighthouse.ucsf.edu ; agwReColorTerminal' ## Database machine
alias bueno='SET_BUENOCOLOR ; ssh  $UCSF_USER@bueno.gladstone.internal ; agwReColorTerminal' ## Compute machine, accessible *through* lighthouse for some reason. Not otherwise accessible from off campus.
alias chef='ssh $UCSF_USER@chef.compbio.ucsf.edu ; agwReColorTerminal' ## QB3 cluster head node


case "$HOSTNAME" in
    nausicaa)
	alias nau="echo -e -n '$a_warning_color' ; echo 'This machine *is* nausicaa already!' ; echo -e -n '$a_end_color'"
	alias workup="echo -e -n '$a_warning_color' ; echo 'No need to update: this machine is already the Mercurial main root. You cannot update anything from it, since there is nowhere to pull changes from.' ; echo -e -n '$a_end_color'"
	;;
    catbus)
	alias catbus="echo -e -n '$a_warning_color' ; echo 'This machine *is* catbus already!' ; echo -e -n '$a_end_color'"
	;;
    *)
	;;
esac


## ===============================================
## ====== LESS ===================================
export PAGER=less
[[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)" # make "less" friendly for non-text input files

# Things related to "LESS"
export LESSOPEN="|${TIME_FOR_SCIENCE_DIR}/Config/1_Shell_Config/lesspipe_basic.sh %s"
# lesspipe_basic.sh casues less to transparently decompress gzipped files before showing them
# Old:  '|/usr/bin/lesspipe.sh %s'

alias magicless='env LESSOPEN="|${TIME_FOR_SCIENCE_DIR}/Config/1_Shell_Config/lesspipe_advanced.sh %s" /usr/bin/less -S --RAW-CONTROL-CHARS -f --IGNORE-CASE'
# It's less, but it "magically" handles gzipped files and automatically runs ".tab" files through sheet.pl
# Note that this only magically happens if the files are passed in on the command line--otherwise you have
# to use "ssf" to force sheet.pl to be run (if a file is passed through a pipe, then it won't be run through
# sheet.pl unless you say "cat something | ssf"
## ====== LESS ===================================
## ===============================================

# Plain "sn" doesn't run anything through sheet.pl, but it *does* handle gzipped files
alias sn='/usr/bin/less -S --LINE-NUMBERS --status-column --RAW-CONTROL-CHARS -f --IGNORE-CASE'

alias sweep='trash.pl *.tmp *.temp' ## Sweep out the .tmp files

function s { ## <-- this needs to come BEFORE the other things that use less!
    # "s" uses "magicless" to run files through sheet.pl
    magicless --LINE-NUMBERS --status-column $*
}

function sf {
    # Forces sheet.pl to be called ("SS Force sheet.pl").  Can only view ONE file, unlike "ss"
    /usr/bin/less --RAW-CONTROL-CHARS $1 | sheet.pl --color=always | s
}

function s1 {
    # like sf, but shorter columns # Can only view ONE file, unlike "ss"
    /usr/bin/less --RAW-CONTROL-CHARS $1 | sheet.pl --color=always --trunc=15 | s
}

function s2 {
    # like sf, but shorter columns # Can only view ONE file, unlike "ss"
    /usr/bin/less --RAW-CONTROL-CHARS $1 | sheet.pl --color=always --trunc=25 | s
}

function v {
    # Use sheet.py to view a file or list of files. These files cannot be gzipped, however.
    # Must be python2.6, and not python 3, currently
    python `which sheet.py` $*
}



alias huh='cat <(declare -f) <(alias)' ## uses bash subshells to show everything that is defined

alias backoff='~/TimeForScience/Config/Alex_Williams/unix_scripts/crashplan-backup-mod.sudo.sh off'
alias backon='~/TimeForScience/Config/Alex_Williams/unix_scripts/crashplan-backup-mod.sudo.sh on'



function n {
    echo -e  "$color_prefix[30m black $color_prefix[31mred $color_prefix[32mgreen $color_prefix[33myellow $color_prefix[34mblue $color_prefix[35mmagenta $color_prefix[36mcyan $color_prefix[37mwhite"
}

function zzz {
    echo -e "${a_echo_color}>>> BASH: Loading .bashrc...${a_end_color}"
}
