# -*-Sh-*- <-- tells emacs what kind of syntax highlighting to use

if [ -f ~/TimeForScience/Config/Alex_Williams/bash-platform-specific ]; then
    source ~/TimeForScience/Config/Alex_Williams/bash-platform-specific
fi


echo -e "${a_echo_color}>>> BASH: Loading bash-aliases...${a_end_color}"

## Searches both the R source and the current directory (and any subdirectories!)
## Note that it only looks for files with a ".R" ending!!!!!!!


alias SET_NAUCOLOR="echo -n ''"
alias SET_LOCALCOLOR="echo -n ''"
alias SET_LIGHTHOUSECOLOR="echo -n ''"
alias SET_BUENOCOLOR="echo -n ''"


if [ $isMac -eq 1 ] ; then
    function ff {
	`which grep` --color=always --ignore-case --recursive --extended-regexp --exclude="Mothballed" --exclude=".hg" --exclude="CVS" --exclude="[bB]ackup*" --exclude="Annotation*.txt" \
	    "$*" \
	    "${BINF_CORE_WORK_DIR}/Common/Code/R_Binf_Core" \
	    "${BINF_CORE_WORK_DIR}/Common/Code/ProjectCode" \
	    "/home/alexgw/TimeForScience" \
	    ./
    }
#    alias SET_NAUCOLOR="osascript -e 'tell front window of app \"Terminal\" to set background color to {0,0,0,-20750}' &> /dev/null"
#    alias SET_LOCALCOLOR="osascript -e 'tell front window of app \"Terminal\" to set background color to {14000,1500,1500,-20750}' &> /dev/null"

#    alias SET_BUENOCOLOR="osascript -e 'tell front window of app \"Terminal\" to set background color to {1500,1500,15000,-20750}' &> /dev/null"
#    alias SET_LIGHTHOUSECOLOR="osascript -e 'tell front window of app \"Terminal\" to set background color to {14000,8000,1500,-20750}' &> /dev/null"

#    if [[ isAGWHomeMachine -ne 1 ]]; then
   # only works with Terminal, not iTerm
    # This causes the terminal background colors to be set on a per-machine basis
#	osascript -e 'tell front window of app "Terminal" to set background color to {14000,1500,1500,-20750}' &> /dev/null ## only set the color when we are at WORK, not when we are on my home machine!
#    fi

else
    ## Must be different between mac/unix
    function ff {
	grep --color=always -T \
	    --ignore-case \
	    --recursive \
	    --extended-regexp \
	    --line-number --with-filename \
	    --exclude-dir="Mothballed" --exclude-dir="\.hg" --exclude-dir="CVS" --exclude-dir="[bB]ackup*" \
	    --binary-files=without-match \
	    --include=*.R --include=*.pl --include=*.py \
	    "$*" \
	    "${BINF_CORE_WORK_DIR}/Common/Code/R_Binf_Core" \
	    "${BINF_CORE_WORK_DIR}/Common/Code/ProjectCode" \
	    "/home/alexgw/TimeForScience"
    }
fi

function delve {
    ## Finds, in any subdirectories, any files that have a name that matches the input text.
    ## Sort of like a poor man's "locate"
    find ./ -iname "*$**"
}

BRACKET_OPEN='{'
PAREN_OPEN='('
alias cheat="echo \">>> Find all .R files in a directory:   find ./ -name \"*.R\" -exec ls \'{}\' \;\" ; \
echo \">>> See why an Ubuntu machine wants to reboot:  cat /var/run/reboot-required.pkgs\" ; \
echo \">>> Diff directories:   diff -rq DIR1 DIR2\" ; \
echo \">>> Check the version of an apt-get installed package:   dpkg -s <packagename>  OR   dpkg -l | grep -i <search_string>\" ; \
echo \">>> Install a new package in R from source:  R CMD INSTALL packagename.tar.gz  (or use biocLite(...) or install.packages(...))\" ; \
echo \">>> Check current Linux version: cat /etc/*-release\" ; \
echo \">>> Print every Xth line from FILE, starting with line Y: awk 'NR%X==Y'\" FILE ; \
echo \">>> Set the time on Ubuntu: sudo ntpdate-debian\" ; \
echo \">>> BASH: Foreach / rename: for f in \\\$${PAREN_OPEN}ls); do echo \\\$f will become \\\$${BRACKET_OPEN}f/.txt/.newending} ; done  \" ; \
echo \">>> EMACS: insert newline in search-and-replace:  Ctrl-Q Ctrl-J\" ; \
echo \">>> Make files readable, directories r+x (print0/-0 makes filenames with spaces work):\" ; \
echo \"      sudo chmod -R a+r ./ ; sudo find ./ -type d -print0 | sudo xargs -0 chmod a+x \" ; \
echo \">>> Gnu parallel: works like xargs, but works with files with spaces, by default. \" ; \
echo \">>> Perl multi-line search/replace: perl -00pe 's{thing1}{thing2}gxms' THE_FILE \"  s lets '.' match newlines\; m makes ^ and \$ work ; \
echo \">>> SAM --> BAM:  samtools view -bS in.sam > out.bam;\" ; \
echo \">>> BAM --> SAM:  samtools view -h  in.bam > out.sam;\" ; \
echo \">>> Count frequencies of first 5 bases of a SAM file: cut -f 10 theFile.sam | cut -c 1-5 | sort | uniq -c \" ; \
echo \">>> Perl: select random subset of lines (0.5 = 50%, 0.1 = 10%, etc):  perl -ne 'if ( rand() < 0.5 ) { print(\\\$_); }' theFile.txt \" ; \
echo \">>> Reverse-complement DNA:  perl -e '\\\$x = qq{AAAA_SEQUENCE_GGGG_TT_CC}; \\\$_ = scalar(reverse(\\\$x)); tr/ACGT/TGCA/; print \\\$_;' \" ; \
echo \">>> Apache error log: sudo less -S /var/log/apache2/error.log \" ; \
echo \">>> coproc: re-run a command every 19 seconds: for i in {1..50} ; do coproc { ls >> myfile.tmp ; } ; sleep 19; kill \\\$COPROC_PID ; sleep 2; done \" ; \
echo \">>> dpkg / apt-get woes? Try manually editing /var/lib/dpkg/info/YOURPACKAGE . Be careful! \" ; \
"

# for f in `ls` ; do cat $f | sed -n '2~4p' | count_char_freq_at_each_position.pl > ${f/_unalign.fq/.count} ; done



alias tunes="lsof | grep -i mp3"
alias viewlog='tail -f /var/log/httpd/access_log'

alias treeviewmemory='java -Xmx999m -jar TreeView.jar'

alias diffdir='diff -rq' ## diff on directories

# Shell navigation / commands

pushd() { builtin pushd "$@" > /dev/null; } ## <-- make it so that pushd doesn't print the stack every single time


alias l='/bin/ls -F $AGW_LS_COLOR_OPTION'
alias ls='/bin/ls -F $AGW_LS_COLOR_OPTION'
alias ll='/bin/ls -lh -A -F $AGW_LS_COLOR_OPTION'
alias p='pwd -P'
alias tc='randomize_terminal_color.pl -cycle'
#alias cd='pushd'
alias b='popd'
alias ..='cd ..'
#alias ..='pushd ..'
alias res='source ~/.bashrc ; source ~/.bash_profile'
alias mv='mv -i'
alias cp='cp -i'
alias kpk='exit'




## Below: aliases the command "rm" to actually run the script "trash.pl," which moves files to a trash directory in /tmp.
## They can be recovered by just copying them back.
## Use the "checktrash" command to find the trash directory if you forget where it is.
#alias rm='/home/alexgw/trash.pl'
alias rm='trash.pl'

## Below: the REAL rm command in /bin/rm is aliased to "rrm". rrm will delete files instantly.
## You may need to use this in the few cases where trash.pl doesn't work, like for files with unusual special characters.
alias rrm='/bin/rm'
##alias rrm='/bin/rm' # --verbose --preserve-root --interactive=once'

## Below: the command to list the top-level contents of the trash directory. You may have to look through the files here if you want to recover something you just accidentally deleted. Beware, files don't last long in /tmp\!
alias checktrash='mkdir -p /tmp/${USER}/Trash/ && echo "Contents of /tmp/${USER}/Trash:" && ls /tmp/${USER}/Trash/'
alias emptytrash='mkdir -p /tmp/${USER}/Trash/ && /bin/rm -rfv --preserve-root /tmp/${USER}/Trash/ && echo "Emptied the trash directory (/tmp/${USER}/Trash)" ;'


## "showoff" makes it so that everyone can a+rx any directories and a+r any files.
## Note that we don't want to make it so everyone can execute *files* necessarily, just folders
## ("Executing" a folder means you can "ls" it and see what's inside.)
function showoff {          chmod -R a+r $1 ;      find $1 -type d -print0 |      xargs -0 chmod a+x ; }
function sudoshowoff { sudo chmod -R a+r $1 ; sudo find $1 -type d -print0 | sudo xargs -0 chmod a+x ; }


alias crt='crontab -u ${USER} -e'

## Mac-specific commands:
alias invisible='SetFile -a V' ## Make a file/folder invisible to the Finder
alias visible='SetFile -a v' ## opposite of "invisible"
alias clearicon='SetFile -a c' ## clear mac custom icons. Useful for images that have old custom icons.

#alias s='less -S --LINE-NUMBERS'

alias version="lsb_release -a" # Tells you which version of Ubuntu you are running!

alias res="source ~/.bashrc"


# Convert a Mac-style line-ending file to a UNIX one
# Useful for when you save a file in Excel and then UNIX won't read it.
alias mac2unix="tr '\r' '\n'"

# Convert a Windows-style line-ending file to a UNIX one
# Useful for when you save a file in Excel and then UNIX won't read it.
alias dos2unix="tr -d '\r'"


## Mac-specific commands:
alias invisible='SetFile -a V' ## Make a file/folder invisible to the Finder
alias visible='SetFile -a v' ## opposite of "invisible"

## remember dot_clean to remove annoying ._something files


## Utility commands

## -U: "screen understands UTF8"
alias rr="screen -xR -U" ## Reconnect to the previous screen, or make a new one if there isn't one already
alias sc='screen' ## Make a new screen session

alias wcl='wc -l'
alias sortt='sort -t "	"' # sort with tab as separator
alias sortg='sort -g -t "	"' # sort NUMBERS, with tab as separator

if [[ isAGWHomeMachine -eq 1 ]]; then
    alias e='/Applications/Emacs.app/Contents/MacOS/Emacs -nw'
elif [[ isMac -eq 1 ]]; then
    alias e='emacs --daemon ; emacsclient -a "emacs"'
else
    alias e='emacs --daemon ; emacsclient -c -a "emacs"'
    #alias e='emacs -nw'
fi

alias t='transpose.pl -q'
alias tattle="echo -e -n '$a_status_color'; ps aux | tail -n +2 | sort --reverse -k 3,3 | head -n 5 | perl -p -e 's/[ ]+/\t/g' | cut -f 1,3,4,11 | cap.pl 'USER,CPU,MEM,TASK' | sheet.pl --color=always \
--ht=75 --trunc=60 | tail -n +2 ; echo -e -n '$a_end_color'"

# GNU Make-related
alias make='make --warn-undefined-variables --print-directory'
alias mcm='make clean && make'
function remake {
    ## Lets you type "remake" to remove a file and then use GNU make to try to re-generate it
	trash.pl "$1" && make --warn-undefined-variables --print-directory "$1"
}

# Aliases related to COLOR GREP
alias grepc='grep   --color=always --with-filename --line-number'
alias egrepc='egrep --color=always --with-filename --line-number'
alias fgrepc='fgrep --color=always --with-filename --line-number'

# Aliases related to CVS
alias commit="cvs commit -m 'AGW CVS Commit'"
alias gitcom="git commit -a -m 'Changes committed by alexgw'"
alias gitstat="git ls-files --modified --deleted"
alias gitdiff="git difftool"

alias hgcom="hg commit -u '${USER}' -m 'Changes committed by ${USER}' && echo '[Done] committing changes locally with Mercurial.'"
alias hgpush="hg commit -u '${USER}' -m 'Changes committed by ${USER}' && hg push && echo '[Done] pushing changes to the remote server with Mercurial.'"
alias hgpull="hg pull && hg update && echo '[Done] pulling remote changes and updating the local Mercurial repository.'"
alias hgup="hg update && echo '[Done] updating local changes in Mercurial'"
alias hgs="hg status"

function hglog {
    hg status
    if [[ $? == "0" ]] ; then  ## <-- only check the log if there is actually a mercurial repo here!
	hg log -p --color=always $* | s
    fi
}


if [[ $USER == "alexgw" ]]
then
    alias alexcom='ssh alexcom@alexwilliams.com'
fi




alias nau='SET_NAUCOLOR ; ssh  $UCSF_USER@nausicaa.ucsf.edu'
alias workstat='hg --cwd "${BINF_CORE_WORK_DIR}/Common/Code" status ; hg --cwd "${BINF_CORE_WORK_DIR}/Common/GICD_ProjectArchives status"'

function workcom {
    ## Note that "push" will always complain on Nausicaa or Catbus, because those are the MASTER repositiories
    hg commit --user ${USER} --cwd "${BINF_CORE_WORK_DIR}/Common/Code" -m "Commit by ${USER}" ;
    hg push --cwd "${BINF_CORE_WORK_DIR}/Common/Code" ;

    hg commit --user ${USER} --cwd "${BINF_CORE_WORK_DIR}/Common/GICD_ProjectArchives" -m "Commit by ${USER}" ;
    hg push --cwd "${BINF_CORE_WORK_DIR}/Common/GICD_ProjectArchives" ;

    hg commit --user ${USER} --cwd "${BINF_CORE_WORK_DIR}/Common/Data" -m "Commit by ${USER}" ;
    hg push --cwd "${BINF_CORE_WORK_DIR}/Common/Data" ;

    echo "[Done] committing work repository"  # && hg push --cwd ${BINF_CODE}'
}

function workup {
    hg --cwd "${BINF_CORE_WORK_DIR}/Common/Code" pull && hg --cwd "${BINF_CORE_WORK_DIR}/Common/Code" update && echo "[Done] updating work code repository"
    hg --cwd "${BINF_CORE_WORK_DIR}/Common/Data" pull && hg --cwd "${BINF_CORE_WORK_DIR}/Common/Data" update && echo "[Done] updating work data repository"
    hg --cwd "${BINF_CORE_WORK_DIR}/Common/GICD_ProjectArchives" pull && hg --cwd "${BINF_CORE_WORK_DIR}/Common/GICD_ProjectArchives" update && echo "[Done] updating work project archive repository"
}

alias sciencecom='hg commit --user ${USER} --cwd "${TIME_FOR_SCIENCE_DIR}" -m "Commit by ${USER}" && hg push --cwd ${TIME_FOR_SCIENCE_DIR} && echo "[Done] commiting and pushing TimeForScience repository"'
alias scienceup='hg --cwd "${TIME_FOR_SCIENCE_DIR}" pull           && hg --cwd "${TIME_FOR_SCIENCE_DIR}" update           && echo "[Done] updating TimeForScience repository"'


alias science="scienceup ; sciencecom ; workup ; workcom"
alias sciencestat='hg --cwd ${TIME_FOR_SCIENCE_DIR} status'

alias catbus='ssh $UCSF_USER@catbus.gladstone.internal'
alias chef='ssh $UCSF_USER@chef.compbio.ucsf.edu' ## QB3 cluster head node
alias lighthouse='SET_LIGHTHOUSECOLOR ; ssh  $UCSF_USER@lighthouse.ucsf.edu' ## Database machine
alias bueno='SET_BUENOCOLOR ; ssh  $UCSF_USER@bueno.gladstone.internal' ## Compute machine, accessible *through* lighthouse for some reason. Not otherwise accessible from off campus.


case "$HOSTNAME" in
    nausicaa)
	alias nau="echo -e -n '$a_warning_color' ; echo 'This machine *is* nausicaa already!' ; echo -e -n '$a_end_color'"
	alias workup="echo -e -n '$a_warning_color' ; echo 'No need to update: this machine is already the Mercurial main root. You cannot update anything from it, since there is nowhere to pull changes from.' ; echo -e -n '$a_end_color'"
	;;
    catbus)
	alias catbus="echo -e -n '$a_warning_color' ; echo 'This machine *is* catbus already!' ; echo -e -n '$a_end_color'"
	;;
    *)
	;;
esac


# Things related to "LESS"
export LESSOPEN="|${TIME_FOR_SCIENCE_DIR}/Config/1_Shell_Config/lesspipe_basic.sh %s"
# lesspipe_basic.sh casues less to transparently decompress gzipped files before showing them
# Old:  '|/usr/bin/lesspipe.sh %s'

alias magicless='env LESSOPEN="|${TIME_FOR_SCIENCE_DIR}/Config/1_Shell_Config/lesspipe_advanced.sh %s" /usr/bin/less -S --RAW-CONTROL-CHARS -f --IGNORE-CASE'
# It's less, but it "magically" handles gzipped files and automatically runs ".tab" files through sheet.pl
# Note that this only magically happens if the files are passed in on the command line--otherwise you have
# to use "ssf" to force sheet.pl to be run (if a file is passed through a pipe, then it won't be run through
# sheet.pl unless you say "cat something | ssf"

# Plain "sn" doesn't run anything through sheet.pl, but it *does* handle gzipped files
alias  sn='/usr/bin/less -S --LINE-NUMBERS --status-column --RAW-CONTROL-CHARS -f --IGNORE-CASE'

alias sweep='trash.pl *.tmp *.temp'

function s { ## <-- this needs to come BEFORE the other things that use less!
    # "s" uses "magicless" to run files through sheet.pl
    magicless --LINE-NUMBERS --status-column $*
}

function sf {
    # Forces sheet.pl to be called ("SS Force sheet.pl").  Can only view ONE file, unlike "ss"
    /usr/bin/less --RAW-CONTROL-CHARS $1 | sheet.pl --color=always | s
}

function s1 {
    # like sf, but shorter columns # Can only view ONE file, unlike "ss"
    /usr/bin/less --RAW-CONTROL-CHARS $1 | sheet.pl --color=always --trunc=15 | s
}

function s2 {
    # like sf, but shorter columns # Can only view ONE file, unlike "ss"
    /usr/bin/less --RAW-CONTROL-CHARS $1 | sheet.pl --color=always --trunc=25 | s
}

function v {
    # Use sheet.py to view a file or list of files. These files cannot be gzipped, however.
    # Must be python2.6, and not python 3, currently
    python `which sheet.py` $*
}


## Convert line endings mac-style --> UNIX
## Useful for loading Excel-generated .txt files
function mac2unix {
    cat $1 | tr '\r' '\n'
}

## Convert line endings dos-style --> UNIX
## Useful for loading Excel-generated .txt files
function dos2unix {
    cat $1 | tr -d '\r'
}


alias huh='cat <(declare -f) <(alias)' ## uses bash subshells to show everything that is defined


alias backoff='~/TimeForScience/Config/Alex_Williams/unix_scripts/crashplan-backup-mod.sudo.sh off'
alias backon='~/TimeForScience/Config/Alex_Williams/unix_scripts/crashplan-backup-mod.sudo.sh on'



