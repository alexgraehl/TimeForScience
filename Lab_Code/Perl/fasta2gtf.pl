#!/usr/bin/env perl

#@COMMENT@ fasta2gtf_one_line_per_chr.pl is a bioinformatics-specific tool that takes a FASTA (genome sequence) file and makes a GTF (annotation) file that spans each chromosome (or other sequence) in the input FASTA file, making a placeholder gene/exon for that chromosome. This is useful if you are inserting plasmids or other elements to a genome and you want to count them. Frequency-of-use rating: 3/10 (bioinformatics use).

# By Alex Williams, 2016
# Usage: cat "fastaFile.fa" | fasta2gtf_one_line_per_chr.pl > out.gtf

use strict;  use warnings;  use diagnostics;
use POSIX      qw(ceil floor);
use List::Util qw(max min);
use Getopt::Long;
use Carp; # backtrace on errors. Has the "confess" function. Use this instead of "die" if you want useful information!   


sub main();
sub quitWithUsageError($) { print($_[0] . "\n"); printUsageAndQuit(); print($_[0] . "\n"); }
sub printUsageAndQuit() { printUsage(); exit(1); }

sub printUsage() {
    print STDOUT <DATA>;
    exit(0);
}


my $feature = undef;
my $len     = undef;

sub printFeatAsGtfLine($$) {
	my ($feat_name, $feat_len) = @_; # feature name, feature length
	my $delim = "\t";
	my $source = "AGW_autogenerated_GTF";
	my $score = "."; # '.' = no relevant score
	my $strand = "+";

	# From GTF docs: http://mblab.wustl.edu/GTF22.html
	# The following feature types are required: "CDS", "start_codon", "stop_codon". The features "5UTR", "3UTR", "inter", "inter_CNS", "intron_CNS" and "exon" are optional. All other features will be ignored. The types must have the correct capitalization shown here.
	# The "start_codon" feature is up to 3bp long in total and is included in the coordinates for the "CDS" features. The "stop_codon" feature similarly is up to 3bp long and is excluded from the coordinates for the "3UTR" features, if used.

	($feat_name !~ m/\s/) or warn "Note: Feature (i.e., gene) names CANNOT contain spaces in a GTF file! Converting them to underscores.\n";
	$feat_name =~ s/\s/_/g; # <-- convert spaces to underscores

	$feat_len >= 1 or confess "Got a FASTA feature named '$feat_name' with a length less than 1 (it was $feat_len), which is an error! Features must have a non-zero length.";
	my $start = 1; # ("Start position of the feature, with sequence numbering starting at 1.": http://uswest.ensembl.org/info/website/upload/gff.html)
	my $end   = $start+$feat_len-1; # We do NOT add one to the length---in fact, we SUBTRACT one, because "1 to 1" is length 1, "1 to 2" is length 2, etc.  "<start> must be less than or equal to <end>"
	($end >= $start) or confess "End cannot be less than start. Feature length must have been 0, which should be impossible.";

	my $exon_id  = "${feat_name}_exon";
	my $exon_num = 1; # always 1

	my $ann      = qq{exon_id "$exon_id"; exon_number "$exon_num"; gene_id "$feat_name"; gene_name "$feat_name"; transcript_id "$feat_name"; transcript_name "$feat_name"; tss_id "$feat_name";};
	print STDOUT join($delim, "$feat_name", "$source", "CDS"        , "$start", "$end"  , "$score", "$strand", ".", $ann) . "\n";
	print STDOUT join($delim, "$feat_name", "$source", "exon"       , "$start", "$end"  , "$score", "$strand", ".", $ann) . "\n";
	print STDOUT join($delim, "$feat_name", "$source", "start_codon", "$start", "$start", "$score", "$strand", ".", $ann) . "\n"; # note that this is START-START only (it's just one (or zero?) base!)
	print STDOUT join($delim, "$feat_name", "$source", "stop_codon" , "$end"  , "$end"  , "$score", "$strand", ".", $ann) . "\n"; # note that this is END-END only (it's just one (or zero?) base!)
}

sub main() {
	$Getopt::Long::passthrough = 1; # ignore arguments we don't recognize in GetOptions, and put them in @ARGV
	GetOptions("help|?|man" => sub { printUsageAndQuit(); }
		  ) or printUsageAndQuit();
	my %feats = ();		# key = feature, value = length
	my $curFeature = undef;
	my $lineNum = 0;
	while (my $line = <>) {
		$lineNum++;
		chomp($line);
		if ($line =~ m/^>(.*)/) {
			$curFeature = $1;
			#if (defined($curFeature)) { printFeatAsGtfLine($feature, $len); } # print the previously-found feature
			if (exists($feats{$curFeature})) {
				confess "ERROR: Duplicate FASTA entries! There were multiple lines with the 'name' field (the part after the '>') as <$curFeature>, which is forbidden! Each FASTA name must be UNIQUE.";
			}
			$feats{$curFeature} = 0;	# New feature found! $feature = $1;
			#$len = 0; # reset it to zero!
		} else {
			if (!defined($curFeature)) {
				confess "ERROR: Odd... found something that is NOT in a feature, on line $lineNum...\n";
			}
			$line =~ s/\s//g; # remove **all** whitespace from this line, before we compute its length.
			$feats{$curFeature} += length($line);
		}
	}
	foreach my $k (sort(keys(%feats))) { 
		printFeatAsGtfLine($k, $feats{$k});
	}
}


main();
exit(0);


# ====

__DATA__

fasta2gtf.pl  INPUT.fasta   [ >   output.gtf]
   * Writes to STDOUT by default

by Alex Williams, 2016.

This program just makes a GTF file from an input FASTA file.
It makes one feature per '>' line in the fasta file.

See the examples below for more information.

CAVEATS:

Does not totally follow the GTF specs, as it does not make a CDS start/end, for example.

OPTIONS:  (None)

EXAMPLES:

fasta2gtf.pl    my_seqs.fasta    >   out.gtf

KNOWN BUGS:

  None known.

--------------

