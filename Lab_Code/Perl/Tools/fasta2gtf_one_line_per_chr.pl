#!/usr/bin/perl

# By Alex Williams, 2016
# Usage: cat "fastaFile.fa" | fasta2gtf_one_line_per_chr.pl > out.gtf

use strict;  use warnings;  use diagnostics;
use POSIX      qw(ceil floor);
use List::Util qw(max min);
use Getopt::Long;
use Carp; # backtrace on errors. Has the "confess" function. Use this instead of "die" if you want useful information!   

my $feature = undef;
my $len = undef;

sub printFeatAsGtfLine($$) {
	my ($fn, $fl) = @_; # feature name, feature length
	my $delim = "\t";
	my $start = 1;
	my $end = $fl+1;
	my $score = "0.00";
	my $strand = "+";
	print STDOUT join($delim, "$fn", "GTF_Autogenerated_by_Alex", "$start", "$end", "$score", "$strand", ".", qq{gene_id "$fn"; transcript_id "$fn";}) . "\n";
}

my %feats = (); # key = feature, value = length
my $curFeature = undef;
my $lineNum = 0;
while (my $line = <>) {
	$lineNum++;
	chomp($line);
	if ($line =~ m/^>(.*)/) {
		$curFeature = $1;
		#if (defined($curFeature)) { printFeatAsGtfLine($feature, $len); } # print the previously-found feature
		$feats{$curFeature} = 0# New feature found! $feature = $1;
		  #$len = 0; # reset it to zero!
	} else {
		if (defined($curFeature)) {
			$line =~ s/\s//g; # remove **all** whitespace from this line!
			$feats{$curFeature} += length($line);
		} else {
			print STDERR "Odd... found something that is NOT in a feature, on line $lineNum...\n";
		}
	}
}

foreach my $k (sort(keys(%feats))) { 
	printFeatAsGtfLine($k, $feats{$k});
}
